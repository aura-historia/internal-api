openapi: 3.0.0
info:
  title: Blitzfilter Backend API
  description: |
    REST API for the Blitzfilter backend.
    
    The backend is written in Rust and utilizes event-driven architecture with CQRS and Event-Sourcing,
    hosted entirely on AWS using services like API Gateway, OpenSearch, DynamoDB, SQS, and Lambda.
  version: 1.0.0
  contact:
    name: Blitzfilter Team
    url: https://github.com/blitzfilter
  license:
    name: License
    url: https://github.com/blitzfilter/aws-backend/blob/develop/LICENSE

servers:
  - url: https://api.blitzfilter.com
    description: Placeholder server

paths:
  /api/v1/items/{shopId}/{shopsItemId}:
    get:
      summary: Get a single item
      description: |
        Retrieves a single item by its shop ID and shop's item ID.
        Returns localized content based on Accept-Language header and currency preferences.
        Optionally includes item history when requested.
      operationId: getItem
      tags:
        - Items
      parameters:
        - name: shopId
          in: path
          required: true
          description: Unique identifier of the shop
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
        - name: shopsItemId
          in: path
          required: true
          description: Shop's unique identifier for the item. Can be any arbitrary string.
          schema:
            type: string
            format: uuid
            example: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
        - name: currency
          in: query
          required: false
          description: Currency for price display
          schema:
            $ref: '#/components/schemas/CurrencyData'
          example: EUR
        - name: history
          in: query
          required: false
          description: Whether to include item history in the response
          schema:
            type: boolean
            default: false
          example: false
        - name: Accept-Language
          in: header
          required: false
          description: |
            Preferred language for localized content.
            Supports quality values and multiple languages.
            Supported languages: de, en, fr, es (with regional variants).
          schema:
            type: string
            pattern: '^([a-z]{2}(-[A-Z]{2})?(;q=[0-9](\.[0-9])?)?)(,([a-z]{2}(-[A-Z]{2})?(;q=[0-9](\.[0-9])?)?)*)*$'
          examples:
            single:
              value: "de"
              description: "German"
            multiple:
              value: "en;q=0.9,de;q=0.8"
              description: "English preferred, German as fallback"
            regional:
              value: "en-US"
              description: "US English"
      responses:
        '200':
          description: Item found and returned successfully
          headers:
            Content-Language:
              description: The language of the returned content
              schema:
                $ref: '#/components/schemas/LanguageData'
              example: "de"
            ETag:
              description: The event ID of the item for caching
              schema:
                type: string
                format: uuid
              example: "\"550e8400-e29b-41d4-a716-446655440001\""
            Last-Modified:
              description: When the item was last updated
              schema:
                type: string
                format: http-date
              example: "Wed, 01 Jan 2020 00:00:00 GMT"
            Access-Control-Allow-Origin:
              description: CORS header
              schema:
                type: string
              example: "*"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetItemData'
              example:
                itemId: "550e8400-e29b-41d4-a716-446655440000"
                eventId: "550e8400-e29b-41d4-a716-446655440001"
                shopId: "550e8400-e29b-41d4-a716-446655440000"
                shopsItemId: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
                shopName: "My Shop"
                title:
                  text: "Amazing Product"
                  language: "en"
                description:
                  text: "This is an amazing product description"
                  language: "en"
                price:
                  currency: "EUR"
                  amount: 2999
                state: "AVAILABLE"
                url: "https://my-shop.com/products/amazing-product"
                images:
                  - "https://my-shop.com/images/product-1.jpg"
                  - "https://my-shop.com/images/product-2.jpg"
                created: "2024-01-01T10:00:00Z"
                updated: "2024-01-01T12:00:00Z"
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                missing_shop_id:
                  summary: Missing shop ID
                  value:
                    status: 400
                    error: "BAD_PARAMETER"
                    source:
                      field: "shopId"
                      sourceType: "path"
                missing_shops_item_id:
                  summary: Missing shop's item ID
                  value:
                    status: 400
                    error: "BAD_PARAMETER"
                    source:
                      field: "shopsItemId"
                      sourceType: "path"
                invalid_history:
                  summary: Invalid history parameter
                  value:
                    status: 400
                    error: "BAD_QUERY_PARAMETER_VALUE"
                    source:
                      field: "history"
                      sourceType: "query"
                    message: "Expected any of: 'true' or 'false'. Got: 'invalid'"
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 404
                error: "ITEM_NOT_FOUND"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 500
                error: "INTERNAL_SERVER_ERROR"

  /api/v1/items:
    get:
      summary: Search items
      description: |
        Search for items using a text query with various filtering and sorting options.
        Returns a paginated collection of items matching the search criteria.
      operationId: searchItems
      tags:
        - Items
      parameters:
        - name: q
          in: query
          required: true
          description: Text search query (minimum 3 characters)
          schema:
            type: string
            minLength: 3
          example: "smartphone case"
        - name: language
          in: query
          required: false
          description: Language for search and localized content
          schema:
            $ref: '#/components/schemas/LanguageData'
            default: de
          example: en
        - name: currency
          in: query
          required: false
          description: Currency for price display
          schema:
            $ref: '#/components/schemas/CurrencyData'
            default: EUR
          example: USD
        - name: sort
          in: query
          required: false
          description: Field to sort results by
          schema:
            $ref: '#/components/schemas/SortItemFieldData'
          example: price
        - name: order
          in: query
          required: false
          description: Sort order (only valid when sort is specified)
          schema:
            type: string
            enum: [asc, desc]
          example: asc
        - name: searchAfter
          in: query
          required: false
          description: |
            Cursor value for pagination (search-after pattern).
            This is a JSON value returned as `searchAfter` in the previous response.
            Use this to fetch the next page of results.
            In general you do not have to worry about determining this key. It's given with the `searchAfter` field in the preceding response if more entries are present.
            This can be ANY heterogeneous array.
          schema:
            type: array
          example: "[2999, \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"]"
        - name: size
          in: query
          required: false
          description: Number of items to return per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 21
          example: 21
      responses:
        '200':
          description: Search results returned successfully
          headers:
            Access-Control-Allow-Origin:
              description: CORS header
              schema:
                type: string
              example: "*"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSearchResultData'
              example:
                items:
                  - itemId: "550e8400-e29b-41d4-a716-446655440000"
                    eventId: "550e8400-e29b-41d4-a716-446655440001"
                    shopId: "550e8400-e29b-41d4-a716-446655440000"
                    shopsItemId: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
                    shopName: "Tech Store"
                    title:
                      text: "Smartphone Case"
                      language: "en"
                    price:
                      currency: "USD"
                      amount: 1999
                    state: "AVAILABLE"
                    url: "https://tech-store.com/smartphone-case"
                    images:
                      - "https://tech-store.com/images/case-1.jpg"
                    created: "2024-01-01T10:00:00Z"
                    updated: "2024-01-01T12:00:00Z"
                size: 21
                total: 127
                searchAfter: "[1999, \"550e8400-e29b-41d4-a716-446655440000\"]"
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                missing_query:
                  summary: Missing search query
                  value:
                    status: 400
                    error: "BAD_PARAMETER"
                    source:
                      field: "q"
                      sourceType: "query"
                query_too_short:
                  summary: Search query too short
                  value:
                    status: 400
                    error: "TEXT_QUERY_TOO_SHORT"
                    source:
                      field: "q"
                      sourceType: "query"
                    message: "Text query must be at least 3 characters long"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 500
                error: "INTERNAL_SERVER_ERROR"
    put:
      summary: Bulk create or update items
      description: |
        Creates or updates multiple items in a single batch request.
        This endpoint accepts a collection of item data and processes them asynchronously.
        
        **Shop Enrichment**: The shop information (shopId and shopName) is automatically 
        enriched based on the item's URL. The URL must belong to a shop that is already 
        registered in the system. If the shop is not found, the item will fail with 
        a SHOP_NOT_FOUND error.
        
        **Response Structure**:
        - `skipped`: Number of items that had no changes and were skipped
        - `unprocessed`: URLs of items that could not be processed due to temporary issues (can be retried)
        - `failed`: Map of item URLs to error codes for items that permanently failed processing
        
        Returns information about any items that could not be processed or failed during enrichment.
      operationId: putItems
      tags:
        - Items
      requestBody:
        required: true
        description: Collection of items to create or update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutItemsCollectionData'
            example:
              items:
                - shopsItemId: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
                  title:
                    text: "Smartphone Case Premium"
                    language: "en"
                  description:
                    text: "Premium quality smartphone case with wireless charging support"
                    language: "en"
                  price:
                    currency: "EUR"
                    amount: 2999
                  state: "AVAILABLE"
                  url: "https://tech-store.com/premium-case"
                  images:
                    - "https://tech-store.com/images/premium-case-1.jpg"
                    - "https://tech-store.com/images/premium-case-2.jpg"
                - shopsItemId: "7cb8c920-9dad-11d1-80b4-00c04fd430c9"
                  title:
                    text: "Basic Phone Case"
                    language: "en"
                  state: "LISTED"
                  url: "https://tech-store.com/basic-case"
                  images: []
      responses:
        '200':
          description: Items processed successfully
          headers:
            Access-Control-Allow-Origin:
              description: CORS header
              schema:
                type: string
              example: "*"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutItemsResponse'
              examples:
                all_processed:
                  summary: All items processed successfully
                  value:
                    skipped: 0
                partial_processing_with_failures:
                  summary: Some items failed with errors
                  value:
                    failed:
                      "https://unknown-shop.com/item": "SHOP_NOT_FOUND"
                      "https://tech-store.com/expensive-item": "MONETARY_AMOUNT_OVERFLOW"
                    skipped: 0
                partial_processing_with_unprocessed:
                  summary: Some items could not be processed (temporary issue)
                  value:
                    unprocessed:
                      - "https://tech-store.com/item-1"
                      - "https://tech-store.com/item-2"
                    skipped: 2
        '400':
          description: Bad request - invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                missing_body:
                  summary: Missing request body
                  value:
                    status: 400
                    error: "BAD_BODY_VALUE"
                    message: "Body cannot be empty"
                invalid_json:
                  summary: Invalid JSON format
                  value:
                    status: 400
                    error: "BAD_BODY_VALUE"
                    message: "Invalid JSON format"
                shop_not_found:
                  summary: Shop not found for item URL
                  value:
                    status: 400
                    error: "SHOP_NOT_FOUND"
                    message: "No shop registered for the provided item URL"
                monetary_overflow:
                  summary: Price amount overflow during enrichment
                  value:
                    status: 400
                    error: "MONETARY_AMOUNT_OVERFLOW"
                    message: "Price amount exceeds maximum value during currency conversion"
                enrichment_failed:
                  summary: Item enrichment failed
                  value:
                    status: 400
                    error: "ITEM_ENRICHMENT_FAILED"
                    message: "Failed to enrich item with shop and price information"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 500
                error: "INTERNAL_SERVER_ERROR"

  /api/v1/items/search:
    post:
      summary: Complex item search
      description: |
        Performs an advanced search for items using a comprehensive search filter.
        This endpoint accepts a SearchFilterData object in the request body,
        allowing for complex filtering by multiple criteria simultaneously.
        Returns a paginated collection of items matching the search criteria.
      operationId: complexSearchItems
      tags:
        - Items
      parameters:
        - name: sort
          in: query
          required: false
          description: Field to sort results by
          schema:
            $ref: '#/components/schemas/SortItemFieldData'
          example: price
        - name: order
          in: query
          required: false
          description: Sort order (only valid when sort is specified)
          schema:
            type: string
            enum: [asc, desc]
          example: asc
        - name: searchAfter
          in: query
          required: false
          description: |
            Cursor value for pagination (search-after pattern).
            This is a JSON value returned as `searchAfter` in the previous response.
            Use this to fetch the next page of results.
            In general you do not have to worry about determining this key. It's given with the `searchAfter` field in the preceding response if more entries are present.
            This can be ANY heterogeneous array.
          schema:
            type: array
          example: "[2999, \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"]"
        - name: size
          in: query
          required: false
          description: Number of items to return per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 21
          example: 21
      requestBody:
        required: true
        description: |
          Search filter configuration with all filtering criteria.
          Unlike the simple text search, this allows filtering by multiple fields,
          price ranges, item states, and date ranges.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchFilterData'
            example:
              language: "en"
              currency: "USD"
              itemQuery: "smartphone case"
              shopNameQuery: "Tech Store"
              price:
                min: 1000
                max: 5000
              state: ["AVAILABLE"]
              created:
                min: "2024-01-01T00:00:00Z"
                max: "2024-12-31T23:59:59Z"
      responses:
        '200':
          description: Complex search results returned successfully
          headers:
            Access-Control-Allow-Origin:
              description: CORS header
              schema:
                type: string
              example: "*"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSearchResultData'
              example:
                items:
                  - itemId: "550e8400-e29b-41d4-a716-446655440000"
                    eventId: "550e8400-e29b-41d4-a716-446655440001"
                    shopId: "550e8400-e29b-41d4-a716-446655440000"
                    shopsItemId: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
                    shopName: "Tech Store"
                    title:
                      text: "Premium Smartphone Case"
                      language: "en"
                    price:
                      currency: "USD"
                      amount: 2999
                    state: "AVAILABLE"
                    url: "https://tech-store.com/premium-case"
                    images:
                      - "https://tech-store.com/images/premium-case-1.jpg"
                    created: "2024-01-15T10:00:00Z"
                    updated: "2024-01-15T12:00:00Z"
                size: 21
                total: 84
                searchAfter: "[2999, \"550e8400-e29b-41d4-a716-446655440000\"]"
        '400':
          description: Bad request - invalid parameters or body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                missing_body:
                  summary: Missing request body
                  value:
                    status: 400
                    error: "BAD_BODY_VALUE"
                    message: "Body cannot be empty"
                invalid_json:
                  summary: Invalid JSON format
                  value:
                    status: 400
                    error: "BAD_BODY_VALUE"
                    message: "Invalid JSON format"
                invalid_item_query:
                  summary: Invalid item query length
                  value:
                    status: 400
                    error: "BAD_BODY_VALUE"
                    message: "itemQuery must be at least 3 characters long"
                invalid_sort_field:
                  summary: Invalid sort field
                  value:
                    status: 400
                    error: "BAD_QUERY_PARAMETER_VALUE"
                    source:
                      field: "sort"
                      sourceType: "query"
                    message: "Expected any of: 'score', 'price', 'updated', 'created'. Got: 'invalid'"
                invalid_order:
                  summary: Invalid sort order
                  value:
                    status: 400
                    error: "BAD_QUERY_PARAMETER_VALUE"
                    source:
                      field: "order"
                      sourceType: "query"
                    message: "Expected any of: 'asc' or 'desc'. Got: 'invalid'"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 500
                error: "INTERNAL_SERVER_ERROR"

  /api/v1/search-filters:
    get:
      summary: List user search filters
      description: |
        Retrieves all search filters for the authenticated user.
        Results can be optionally sorted by creation date.
        Requires valid Cognito JWT authentication.
      operationId: getSearchFilters
      tags:
        - Search Filters
      parameters:
        - name: sort
          in: query
          required: false
          description: Field to sort results by
          schema:
            $ref: '#/components/schemas/SortSearchFilterFieldData'
          example: created
        - name: order
          in: query
          required: false
          description: Sort order (only valid when sort is specified)
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          example: desc
        - name: Authorization
          in: header
          required: true
          description: Cognito JWT token for user authentication
          schema:
            type: string
            pattern: '^Bearer [A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$'
          example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Search filters retrieved successfully
          headers:
            Access-Control-Allow-Origin:
              description: CORS header
              schema:
                type: string
              example: "*"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchFilterCollectionData'
              example:
                items:
                  - userId: "550e8400-e29b-41d4-a716-446655440000"
                    searchFilterId: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
                    searchFilter:
                      language: "en"
                      currency: "USD"
                      itemQuery: "smartphone"
                      shopNameQuery: "Tech Store"
                      price:
                        min: 1000
                        max: 5000
                      state: ["AVAILABLE"]
                    created: "2024-01-01T10:00:00Z"
                    updated: "2024-01-01T12:00:00Z"
                from: 0
                size: 1
                total: 1
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                invalid_sort_field:
                  summary: Invalid sort field
                  value:
                    status: 400
                    error: "BAD_QUERY_PARAMETER_VALUE"
                    source:
                      field: "sort"
                      sourceType: "query"
                    message: "Expected any of: 'created'. Got: 'invalid'"
                invalid_order:
                  summary: Invalid sort order
                  value:
                    status: 400
                    error: "BAD_QUERY_PARAMETER_VALUE"
                    source:
                      field: "order"
                      sourceType: "query"
                    message: "Expected any of: 'asc' or 'desc'. Got: 'invalid'"
        '401':
          description: Unauthorized - invalid or missing JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 401
                error: "UNAUTHORIZED"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 500
                error: "INTERNAL_SERVER_ERROR"
    post:
      summary: Create a new search filter
      description: |
        Creates a new search filter for the authenticated user.
        The search filter configuration is provided in the request body.
        Returns the created search filter with generated ID and metadata.
        Requires valid Cognito JWT authentication.
      operationId: createSearchFilter
      tags:
        - Search Filters
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Cognito JWT token for user authentication
          schema:
            type: string
            pattern: '^Bearer [A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$'
          example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      requestBody:
        required: true
        description: Search filter configuration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchFilterData'
            example:
              language: "en"
              currency: "USD"
              itemQuery: "smartphone"
              shopNameQuery: "Tech Store"
              price:
                min: 1000
                max: 5000
              state: ["AVAILABLE"]
              created:
                min: "2024-01-01T00:00:00Z"
                max: "2024-12-31T23:59:59Z"
      responses:
        '201':
          description: Search filter created successfully
          headers:
            Location:
              description: URL of the created search filter
              schema:
                type: string
                format: uri
              example: "https://api.blitzfilter.com/api/v1/search-filters/6ba7b810-9dad-11d1-80b4-00c04fd430c8"
            Content-Language:
              description: The language of the returned content
              schema:
                $ref: '#/components/schemas/LanguageData'
              example: "en"
            Last-Modified:
              description: When the search filter was created/updated
              schema:
                type: string
                format: http-date
              example: "Wed, 01 Jan 2024 12:00:00 GMT"
            Access-Control-Allow-Origin:
              description: CORS header
              schema:
                type: string
              example: "*"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchFilterData'
              example:
                userId: "550e8400-e29b-41d4-a716-446655440000"
                searchFilterId: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
                searchFilter:
                  language: "en"
                  currency: "USD"
                  itemQuery: "smartphone"
                  shopNameQuery: "Tech Store"
                  price:
                    min: 1000
                    max: 5000
                  state: ["AVAILABLE"]
                created: "2024-01-01T12:00:00Z"
                updated: "2024-01-01T12:00:00Z"
        '400':
          description: Bad request - invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                missing_body:
                  summary: Missing request body
                  value:
                    status: 400
                    error: "BAD_BODY_VALUE"
                    message: "Body cannot be empty"
                invalid_json:
                  summary: Invalid JSON format
                  value:
                    status: 400
                    error: "BAD_BODY_VALUE"
                    message: "Invalid JSON format"
                invalid_item_query:
                  summary: Invalid item query
                  value:
                    status: 400
                    error: "BAD_BODY_VALUE"
                    message: "itemQuery must be at least 3 characters long"
        '401':
          description: Unauthorized - invalid or missing JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 401
                error: "UNAUTHORIZED"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 500
                error: "INTERNAL_SERVER_ERROR"

  /api/v1/search-filters/{searchFilterId}:
    get:
      summary: Get a specific search filter
      description: |
        Retrieves a specific search filter by its ID for the authenticated user.
        Returns the complete search filter configuration and metadata.
        Requires valid Cognito JWT authentication.
      operationId: getSearchFilter
      tags:
        - Search Filters
      parameters:
        - name: searchFilterId
          in: path
          required: true
          description: Unique identifier of the search filter
          schema:
            type: string
            format: uuid
          example: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
        - name: Authorization
          in: header
          required: true
          description: Cognito JWT token for user authentication
          schema:
            type: string
            pattern: '^Bearer [A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$'
          example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Search filter found and returned successfully
          headers:
            Content-Language:
              description: The language of the returned content
              schema:
                $ref: '#/components/schemas/LanguageData'
              example: "en"
            Last-Modified:
              description: When the search filter was last updated
              schema:
                type: string
                format: http-date
              example: "Wed, 01 Jan 2024 12:00:00 GMT"
            Access-Control-Allow-Origin:
              description: CORS header
              schema:
                type: string
              example: "*"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchFilterData'
              example:
                userId: "550e8400-e29b-41d4-a716-446655440000"
                searchFilterId: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
                searchFilter:
                  language: "en"
                  currency: "USD"
                  itemQuery: "smartphone"
                  shopNameQuery: "Tech Store"
                  price:
                    min: 1000
                    max: 5000
                  state: ["AVAILABLE"]
                created: "2024-01-01T10:00:00Z"
                updated: "2024-01-01T12:00:00Z"
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                missing_search_filter_id:
                  summary: Missing search filter ID
                  value:
                    status: 400
                    error: "BAD_PATH_PARAMETER_VALUE"
                    source:
                      field: "searchFilterId"
                      sourceType: "path"
                invalid_uuid:
                  summary: Invalid search filter ID format
                  value:
                    status: 400
                    error: "INVALID_UUID"
                    source:
                      field: "searchFilterId"
                      sourceType: "path"
                    message: "Invalid UUID format"
        '401':
          description: Unauthorized - invalid or missing JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 401
                error: "UNAUTHORIZED"
        '404':
          description: Search filter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 404
                error: "SEARCH_FILTER_NOT_FOUND"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 500
                error: "INTERNAL_SERVER_ERROR"
    delete:
      summary: Delete a search filter
      description: |
        Deletes a specific search filter by its ID for the authenticated user.
        The search filter must exist and belong to the authenticated user.
        Requires valid Cognito JWT authentication.
      operationId: deleteSearchFilter
      tags:
        - Search Filters
      parameters:
        - name: searchFilterId
          in: path
          required: true
          description: Unique identifier of the search filter to delete
          schema:
            type: string
            format: uuid
          example: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
        - name: Authorization
          in: header
          required: true
          description: Cognito JWT token for user authentication
          schema:
            type: string
            pattern: '^Bearer [A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$'
          example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '204':
          description: Search filter deleted successfully
          headers:
            Access-Control-Allow-Origin:
              description: CORS header
              schema:
                type: string
              example: "*"
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                missing_search_filter_id:
                  summary: Missing search filter ID
                  value:
                    status: 400
                    error: "BAD_PATH_PARAMETER_VALUE"
                    source:
                      field: "searchFilterId"
                      sourceType: "path"
                invalid_uuid:
                  summary: Invalid search filter ID format
                  value:
                    status: 400
                    error: "INVALID_UUID"
                    source:
                      field: "searchFilterId"
                      sourceType: "path"
                    message: "Invalid UUID format"
        '401':
          description: Unauthorized - invalid or missing JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 401
                error: "UNAUTHORIZED"
        '404':
          description: Search filter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 404
                error: "SEARCH_FILTER_NOT_FOUND"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 500
                error: "INTERNAL_SERVER_ERROR"
    patch:
      summary: Update a search filter
      description: |
        Updates a specific search filter by its ID for the authenticated user.
        Allows partial updates - only provided fields will be modified.
        If no fields are provided in the request body, returns the existing search filter unchanged.
        Requires valid Cognito JWT authentication.
      operationId: updateSearchFilter
      tags:
        - Search Filters
      parameters:
        - name: searchFilterId
          in: path
          required: true
          description: Unique identifier of the search filter to update
          schema:
            type: string
            format: uuid
          example: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
        - name: Authorization
          in: header
          required: true
          description: Cognito JWT token for user authentication
          schema:
            type: string
            pattern: '^Bearer [A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$'
          example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      requestBody:
        required: false
        description: |
          Partial search filter update data.
          Only provided fields will be updated. If body is empty, returns existing filter.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchFilterDataPatch'
            examples:
              partial_update:
                summary: Update specific fields
                value:
                  shopNameQuery: "Updated Store"
                  price:
                    min: 2000
                    max: 8000
              empty_update:
                summary: No changes (returns existing filter)
                value: {}
      responses:
        '200':
          description: Search filter updated successfully
          headers:
            Content-Language:
              description: The language of the returned content
              schema:
                $ref: '#/components/schemas/LanguageData'
              example: "en"
            Last-Modified:
              description: When the search filter was last updated
              schema:
                type: string
                format: http-date
              example: "Wed, 01 Jan 2024 12:30:00 GMT"
            Access-Control-Allow-Origin:
              description: CORS header
              schema:
                type: string
              example: "*"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchFilterData'
              example:
                userId: "550e8400-e29b-41d4-a716-446655440000"
                searchFilterId: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
                searchFilter:
                  language: "en"
                  currency: "USD"
                  itemQuery: "smartphone"
                  shopNameQuery: "Updated Store"
                  price:
                    min: 2000
                    max: 8000
                  state: ["AVAILABLE"]
                created: "2024-01-01T10:00:00Z"
                updated: "2024-01-01T12:30:00Z"
        '400':
          description: Bad request - invalid parameters or body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                missing_search_filter_id:
                  summary: Missing search filter ID
                  value:
                    status: 400
                    error: "BAD_PATH_PARAMETER_VALUE"
                    source:
                      field: "searchFilterId"
                      sourceType: "path"
                invalid_uuid:
                  summary: Invalid search filter ID format
                  value:
                    status: 400
                    error: "INVALID_UUID"
                    source:
                      field: "searchFilterId"
                      sourceType: "path"
                    message: "Invalid UUID format"
                invalid_json:
                  summary: Invalid JSON format
                  value:
                    status: 400
                    error: "BAD_BODY_VALUE"
                    message: "Invalid JSON format"
                invalid_item_query:
                  summary: Invalid item query length
                  value:
                    status: 400
                    error: "BAD_BODY_VALUE"
                    message: "itemQuery must be at least 3 characters long"
        '401':
          description: Unauthorized - invalid or missing JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 401
                error: "UNAUTHORIZED"
        '404':
          description: Search filter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 404
                error: "SEARCH_FILTER_NOT_FOUND"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 500
                error: "INTERNAL_SERVER_ERROR"

  /api/v1/watchlist:
    get:
      summary: List user's watchlist items
      description: |
        Retrieves all items in the authenticated user's watchlist.
        Results are paginated using search-after cursor-based pagination with timestamp.
        Requires valid Cognito JWT authentication.
      operationId: getWatchlistItems
      tags:
        - Watchlist
      parameters:
        - name: currency
          in: query
          required: false
          description: Currency for price display
          schema:
            $ref: '#/components/schemas/CurrencyData'
          example: EUR
        - name: sort
          in: query
          required: false
          description: Field to sort results by
          schema:
            $ref: '#/components/schemas/SortWatchlistItemFieldData'
          example: created
        - name: order
          in: query
          required: false
          description: Sort order (only valid when sort is specified)
          schema:
            type: string
            enum: [asc, desc]
          example: desc
        - name: searchAfter
          in: query
          required: false
          description: |
            RFC3339 timestamp for cursor-based pagination (search-after).
            Depending on sort-order, returns watchlist-items created, either after this timestamp for asc (oldest first) or before this timestamp for desc (latest first).
            In general you do not have to worry about determining this key. It's given with `searchAfter` in the preceding response if more entries are present.
          schema:
            type: string
            format: date-time
          example: "2024-01-01T10:00:00Z"
        - name: size
          in: query
          required: false
          description: Number of items to return per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 21
          example: 21
        - name: Accept-Language
          in: header
          required: false
          description: |
            Preferred language for localized content.
            Supports quality values and multiple languages.
            Supported languages: de, en, fr, es (with regional variants).
          schema:
            type: string
            pattern: '^([a-z]{2}(-[A-Z]{2})?(;q=[0-9](\.[0-9])?)?)(,([a-z]{2}(-[A-Z]{2})?(;q=[0-9](\.[0-9])?)?)*)*$'
          examples:
            single:
              value: "de"
              description: "German"
            multiple:
              value: "en;q=0.9,de;q=0.8"
              description: "English preferred, German as fallback"
            regional:
              value: "en-US"
              description: "US English"
        - name: Authorization
          in: header
          required: true
          description: Cognito JWT token for user authentication
          schema:
            type: string
            pattern: '^Bearer [A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$'
          example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Watchlist items retrieved successfully
          headers:
            Access-Control-Allow-Origin:
              description: CORS header
              schema:
                type: string
              example: "*"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchlistCollectionData'
              example:
                items:
                  - item:
                      itemId: "550e8400-e29b-41d4-a716-446655440000"
                      eventId: "550e8400-e29b-41d4-a716-446655440001"
                      shopId: "550e8400-e29b-41d4-a716-446655440000"
                      shopsItemId: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
                      shopName: "Tech Store"
                      title:
                        text: "Smartphone Case"
                        language: "en"
                      price:
                        currency: "EUR"
                        amount: 2999
                      state: "AVAILABLE"
                      url: "https://tech-store.com/smartphone-case"
                      images:
                        - "https://tech-store.com/images/case-1.jpg"
                      created: "2024-01-01T10:00:00Z"
                      updated: "2024-01-01T12:00:00Z"
                    created: "2024-01-15T08:00:00Z"
                size: 21
                searchAfter: "2024-01-15T08:00:00Z"
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                invalid_sort_field:
                  summary: Invalid sort field
                  value:
                    status: 400
                    error: "BAD_QUERY_PARAMETER_VALUE"
                    source:
                      field: "sort"
                      sourceType: "query"
                    message: "Expected any of: 'created'. Got: 'invalid'"
                invalid_order:
                  summary: Invalid sort order
                  value:
                    status: 400
                    error: "BAD_QUERY_PARAMETER_VALUE"
                    source:
                      field: "order"
                      sourceType: "query"
                    message: "Expected any of: 'asc' or 'desc'. Got: 'invalid'"
                invalid_from_timestamp:
                  summary: Invalid from timestamp
                  value:
                    status: 400
                    error: "INVALID_RFC3339_TIMESTAMP"
                    source:
                      field: "from"
                      sourceType: "query"
                    message: "Invalid RFC3339 timestamp format"
        '401':
          description: Unauthorized - invalid or missing JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 401
                error: "UNAUTHORIZED"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 500
                error: "INTERNAL_SERVER_ERROR"
    post:
      summary: Add item to watchlist
      description: |
        Adds an item to the authenticated user's watchlist.
        The request body must contain the shop ID and shop's item ID.
        Returns a 201 Created response with a Location header pointing to the created resource.
        Requires valid Cognito JWT authentication.
      operationId: addWatchlistItem
      tags:
        - Watchlist
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Cognito JWT token for user authentication
          schema:
            type: string
            pattern: '^Bearer [A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$'
          example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      requestBody:
        required: true
        description: Item identifier to add to watchlist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemKeyData'
            example:
              shopId: "550e8400-e29b-41d4-a716-446655440000"
              shopsItemId: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
      responses:
        '201':
          description: Item added to watchlist successfully
          headers:
            Location:
              description: URL of the added watchlist item
              schema:
                type: string
                format: uri
              example: "https://api.blitzfilter.com/api/v1/watchlist/550e8400-e29b-41d4-a716-446655440000/6ba7b810-9dad-11d1-80b4-00c04fd430c8"
            Access-Control-Allow-Origin:
              description: CORS header
              schema:
                type: string
              example: "*"
        '400':
          description: Bad request - invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                missing_body:
                  summary: Missing request body
                  value:
                    status: 400
                    error: "BAD_BODY_VALUE"
                    message: "Body cannot be empty"
                invalid_json:
                  summary: Invalid JSON format
                  value:
                    status: 400
                    error: "BAD_BODY_VALUE"
                    message: "Invalid JSON format"
        '401':
          description: Unauthorized - invalid or missing JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 401
                error: "UNAUTHORIZED"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 500
                error: "INTERNAL_SERVER_ERROR"

  /api/v1/watchlist/{shopId}/{shopsItemId}:
    delete:
      summary: Remove item from watchlist
      description: |
        Removes a specific item from the authenticated user's watchlist.
        Requires the creation timestamp as a query parameter to identify the exact watchlist entry.
        Returns a 204 No Content response on success.
        Requires valid Cognito JWT authentication.
      operationId: deleteWatchlistItem
      tags:
        - Watchlist
      parameters:
        - name: shopId
          in: path
          required: true
          description: Unique identifier of the shop
          schema:
            type: string
            format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        - name: shopsItemId
          in: path
          required: true
          description: Shop's unique identifier for the item
          schema:
            type: string
          example: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
        - name: created
          in: query
          required: true
          description: |
            RFC3339 timestamp of when the watchlist entry was created.
            Required to identify the exact entry to delete.
          schema:
            type: string
            format: date-time
          example: "2024-01-15T08:00:00Z"
        - name: Authorization
          in: header
          required: true
          description: Cognito JWT token for user authentication
          schema:
            type: string
            pattern: '^Bearer [A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$'
          example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '204':
          description: Item removed from watchlist successfully
          headers:
            Access-Control-Allow-Origin:
              description: CORS header
              schema:
                type: string
              example: "*"
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                missing_shop_id:
                  summary: Missing shop ID
                  value:
                    status: 400
                    error: "BAD_PATH_PARAMETER_VALUE"
                    source:
                      field: "shopId"
                      sourceType: "path"
                missing_shops_item_id:
                  summary: Missing shop's item ID
                  value:
                    status: 400
                    error: "BAD_PATH_PARAMETER_VALUE"
                    source:
                      field: "shopsItemId"
                      sourceType: "path"
                missing_created:
                  summary: Missing created timestamp
                  value:
                    status: 400
                    error: "BAD_QUERY_PARAMETER_VALUE"
                    source:
                      field: "created"
                      sourceType: "query"
                    message: "The timestamp of when the watchlist-entry was created is required to delete it."
                invalid_created_timestamp:
                  summary: Invalid created timestamp format
                  value:
                    status: 400
                    error: "INVALID_RFC3339_TIMESTAMP"
                    source:
                      field: "created"
                      sourceType: "query"
                    message: "Invalid RFC3339 timestamp format"
                invalid_uuid:
                  summary: Invalid shop ID format
                  value:
                    status: 400
                    error: "INVALID_UUID"
                    source:
                      field: "shopId"
                      sourceType: "path"
                    message: "Invalid UUID format"
        '401':
          description: Unauthorized - invalid or missing JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 401
                error: "UNAUTHORIZED"
        '404':
          description: Watchlist entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 404
                error: "WATCHLIST_ENTRY_NOT_FOUND"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 500
                error: "INTERNAL_SERVER_ERROR"

  /api/v1/shops/{shopId}:
    get:
      summary: Get shop details
      description: |
        Retrieves detailed information about a specific shop by its unique identifier.
        Returns complete shop metadata including name, URL, image, and timestamps.
      operationId: getShop
      tags:
        - Shops
      parameters:
        - name: shopId
          in: path
          required: true
          description: Unique identifier of the shop
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Shop found and returned successfully
          headers:
            Last-Modified:
              description: When the shop was last updated
              schema:
                type: string
                format: http-date
              example: "Wed, 01 Jan 2024 12:00:00 GMT"
            Access-Control-Allow-Origin:
              description: CORS header
              schema:
                type: string
              example: "*"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetShopData'
              example:
                shopId: "550e8400-e29b-41d4-a716-446655440000"
                name: "Tech Store Premium"
                urls: ["https://tech-store-premium.com", "https://tech-store-premium.de", "https://apple.tech-store-premium.com"]
                image: "https://tech-store-premium.com/logo.svg"
                created: "2024-01-01T10:00:00Z"
                updated: "2024-01-01T12:00:00Z"
        '400':
          description: Bad request - invalid shop ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                missing_shop_id:
                  summary: Missing shop ID
                  value:
                    status: 400
                    error: "BAD_PATH_PARAMETER_VALUE"
                    source:
                      field: "shopId"
                      sourceType: "path"
                invalid_uuid:
                  summary: Invalid shop ID format
                  value:
                    status: 400
                    error: "INVALID_UUID"
                    source:
                      field: "shopId"
                      sourceType: "path"
                    message: "Invalid UUID format"
        '404':
          description: Shop not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 404
                error: "SHOP_NOT_FOUND"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 500
                error: "INTERNAL_SERVER_ERROR"

  /api/v1/shops/search:
    post:
      summary: Search shops
      description: |
        Performs an advanced search for shops using comprehensive filtering criteria.
        This endpoint accepts a ShopSearchData object in the request body,
        allowing for complex filtering by shop name and date ranges.
        Returns a paginated collection of shops matching the search criteria.
      operationId: searchShops
      tags:
        - Shops
      parameters:
        - name: sort
          in: query
          required: false
          description: Field to sort results by
          schema:
            $ref: '#/components/schemas/SortShopFieldData'
          example: name
        - name: order
          in: query
          required: false
          description: Sort order (only valid when sort is specified)
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          example: desc
        - name: from
          in: query
          required: false
          description: Pagination offset (number of shops to skip)
          schema:
            type: integer
            minimum: 0
            default: 0
          example: 0
        - name: size
          in: query
          required: false
          description: Number of shops to return per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 21
          example: 21
      requestBody:
        required: true
        description: |
          Shop search filter configuration with all filtering criteria.
          Allows filtering by shop name and creation/update date ranges.
          If you do not want to restrict the search, supply an empty JSON-Object '{}' as body.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopSearchData'
            example:
              shopNameQuery: "tech store"
              created:
                min: "2024-01-01T00:00:00Z"
                max: "2024-12-31T23:59:59Z"
              updated:
                min: "2024-06-01T00:00:00Z"
      responses:
        '200':
          description: Shop search results returned successfully
          headers:
            Access-Control-Allow-Origin:
              description: CORS header
              schema:
                type: string
              example: "*"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopSearchResultData'
              example:
                items:
                  - shopId: "550e8400-e29b-41d4-a716-446655440000"
                    name: "Tech Store Premium"
                    url: "https://tech-store-premium.com"
                    image: "https://tech-store-premium.com/logo.svg"
                    created: "2024-01-15T10:00:00Z"
                    updated: "2024-06-15T12:00:00Z"
                  - shopId: "660f9500-f39c-42e5-b827-556766550001"
                    name: "Tech Store Basic"
                    url: "https://tech-store-basic.com"
                    created: "2024-02-01T08:30:00Z"
                    updated: "2024-07-01T14:20:00Z"
                from: 0
                size: 21
                total: 2
        '400':
          description: Bad request - invalid parameters or body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                missing_body:
                  summary: Missing request body
                  value:
                    status: 400
                    error: "BAD_BODY_VALUE"
                    message: "Body cannot be empty"
                invalid_json:
                  summary: Invalid JSON format
                  value:
                    status: 400
                    error: "BAD_BODY_VALUE"
                    message: "Invalid JSON format"
                invalid_sort_field:
                  summary: Invalid sort field
                  value:
                    status: 400
                    error: "BAD_QUERY_PARAMETER_VALUE"
                    source:
                      field: "sort"
                      sourceType: "query"
                    message: "Expected any of: 'score', 'name', 'updated', 'created'. Got: 'invalid'"
                invalid_order:
                  summary: Invalid sort order
                  value:
                    status: 400
                    error: "BAD_QUERY_PARAMETER_VALUE"
                    source:
                      field: "order"
                      sourceType: "query"
                    message: "Expected any of: 'asc' or 'desc'. Got: 'invalid'"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: 500
                error: "INTERNAL_SERVER_ERROR"

components:
  schemas:
    GetItemData:
      type: object
      description: Complete item information including metadata and localized content
      required:
        - itemId
        - eventId
        - shopId
        - shopsItemId
        - shopName
        - title
        - state
        - url
        - images
        - created
        - updated
      properties:
        itemId:
          type: string
          format: uuid
          description: Unique internal identifier for the item
        eventId:
          type: string
          format: uuid
          description: Unique identifier for the current state/version of the item
        shopId:
          type: string
          format: uuid
          description: Unique identifier of the shop
        shopsItemId:
          type: string
          description: Shop's unique identifier for the item. Can be any arbitrary string.
        shopName:
          type: string
          description: Display name of the shop
        title:
          $ref: '#/components/schemas/LocalizedTextData'
        description:
          allOf:
            - $ref: '#/components/schemas/LocalizedTextData'
          nullable: true
          description: Optional item description
        price:
          allOf:
            - $ref: '#/components/schemas/PriceData'
          nullable: true
          description: Optional item price
        state:
          $ref: '#/components/schemas/ItemStateData'
        url:
          type: string
          format: uri
          description: URL to the item on the shop's website
        images:
          type: array
          items:
            type: string
            format: uri
          description: Array of image URLs for the item
          default: []
        created:
          type: string
          format: date-time
          description: When the item was first created (RFC3339 format)
        updated:
          type: string
          format: date-time
          description: When the item was last updated (RFC3339 format)
        history:
          type: array
          items:
            $ref: '#/components/schemas/GetItemEventData'
          nullable: true
          description: Optional array of item history events

    ItemSearchResultData:
      type: object
      description: Paginated collection of items using cursor-based pagination (search-after pattern)
      required:
        - items
        - size
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/GetItemData'
          description: Array of items in the current page
        size:
          type: integer
          minimum: 0
          description: Number of items returned in the current page
          example: 21
        total:
          type: integer
          minimum: 0
          description: Total number of items matching the query (optional, may not always be available)
          nullable: true
          example: 127
        searchAfter:
          type: array
          description: |
            Cursor for the next page (JSON value). Present when there are more results.
            Pass this value as the `searchAfter` query parameter to get the next page.
            This can be ANY heterogeneous array.
          nullable: true
          example: "[2999, \"550e8400-e29b-41d4-a716-446655440000\"]"

    LocalizedTextData:
      type: object
      description: Text content with language information
      required:
        - text
        - language
      properties:
        text:
          type: string
          description: The text content
        language:
          $ref: '#/components/schemas/LanguageData'

    PriceData:
      type: object
      description: Price information with currency
      required:
        - currency
        - amount
      properties:
        currency:
          $ref: '#/components/schemas/CurrencyData'
        amount:
          type: integer
          description: Price amount in minor currency units (e.g., cents for EUR/USD)
          minimum: 0
          example: 2999

    ItemCreatedEventPayloadData:
      type: object
      description: Minimal information about an item when it was created
      required:
        - state
      properties:
        state:
          $ref: '#/components/schemas/ItemStateData'
        price:
          $ref: '#/components/schemas/PriceData'

    GetItemEventData:
      type: object
      description: Historical event for an item
      required:
        - eventType
        - itemId
        - eventId
        - shopId
        - shopsItemId
        - payload
        - timestamp
      properties:
        eventType:
          $ref: '#/components/schemas/ItemEventTypeData'
        itemId:
          type: string
          format: uuid
          description: Unique internal identifier for the item
        eventId:
          type: string
          format: uuid
          description: Unique identifier for this event
        shopId:
          type: string
          format: uuid
          description: Unique identifier of the shop
        shopsItemId:
          type: string
          format: uuid
          description: Shop's unique identifier for the item. Can be any arbitrary string.
        payload:
          $ref: '#/components/schemas/ItemEventPayloadData'
        timestamp:
          type: string
          format: date-time
          description: When the event occurred (RFC3339 format)

    LanguageData:
      type: string
      enum: [de, en, fr, es]
      description: |
        Supported languages (ISO 639-1 codes):
        - de: German (includes de-DE, de-AT, de-CH, de-LU, de-LI)
        - en: English (includes en-US, en-GB, en-AU, en-CA, en-NZ, en-IE)
        - fr: French (includes fr-FR, fr-CA, fr-BE, fr-CH, fr-LU)
        - es: Spanish (includes es-ES, es-MX, es-AR, es-CO, es-CL, es-PE, es-VE)
      default: de
      example: en

    CurrencyData:
      type: string
      enum: [EUR, GBP, USD, AUD, CAD, NZD]
      description: |
        Supported currencies (ISO 4217 codes):
        - EUR: Euro
        - GBP: British Pound
        - USD: US Dollar
        - AUD: Australian Dollar
        - CAD: Canadian Dollar
        - NZD: New Zealand Dollar
      default: EUR
      example: EUR

    ItemStateData:
      type: string
      enum: [LISTED, AVAILABLE, RESERVED, SOLD, REMOVED, UNKNOWN]
      description: |
        Current state of the item:
        - LISTED: Item has been listed
        - AVAILABLE: Item is available for purchase
        - RESERVED: Item is reserved by a buyer
        - SOLD: Item has been sold
        - REMOVED: Item has been removed and can no longer be tracked
        - UNKNOWN: Item has an unknown state
      example: AVAILABLE

    SortItemFieldData:
      type: string
      enum: [score, price, updated, created]
      description: |
        Fields available for sorting:
        - score: Sort by relevance score (default, only available when searching with text query)
        - price: Sort by item price
        - updated: Sort by last updated timestamp
        - created: Sort by creation timestamp
      default: score
      example: price

    ItemEventTypeData:
      type: string
      enum: [CREATED, STATE_LISTED, STATE_AVAILABLE. STATE_RESERVED, STATE_SOLD, STATE_REMOVED, STATE_UNKNOWN, PRICE_DISCOVERED, PRICE_DROPPED, PRICE_INCREASED, PRICE_REMOVED]
      description: Types of events that can occur for an item
      example: STATE_AVAILABLE

    ItemEventPayloadData:
      oneOf:
        - $ref: '#/components/schemas/ItemCreatedEventPayloadData'
        - $ref: '#/components/schemas/ItemStateData'
        - $ref: '#/components/schemas/PriceData'
      description: Event-specific payload data

    ApiError:
      type: object
      description: Standard error response format
      required:
        - status
        - error
      properties:
        status:
          type: integer
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Error code identifier
          example: "BAD_PARAMETER"
        source:
          $ref: '#/components/schemas/ApiErrorSource'
        message:
          type: string
          description: Human-readable error message
          example: "Expected any of: 'true' or 'false'. Got: 'invalid'"

    ApiErrorSource:
      type: object
      description: Information about the source of the error
      required:
        - field
        - sourceType
      properties:
        field:
          type: string
          description: Name of the field that caused the error
          example: "shopId"
        sourceType:
          type: string
          enum: [query, path, header, body]
          description: Type of parameter that caused the error
          example: "path"

    SearchFilterData:
      type: object
      description: Search filter configuration with query parameters and filtering options
      required:
        - language
        - currency
        - itemQuery
      properties:
        language:
          $ref: '#/components/schemas/LanguageData'
        currency:
          $ref: '#/components/schemas/CurrencyData'
        itemQuery:
          type: string
          description: Text query for searching items (minimum 3 characters)
          minLength: 3
          example: "smartphone case"
        shopNameQuery:
          type: string
          description: Optional text query for filtering by shop name
          minLength: 3
          nullable: true
          example: "Tech Store"
        price:
          allOf:
            - $ref: '#/components/schemas/RangeQueryUInt64'
          nullable: true
          description: Optional price range filter in minor currency units
        state:
          type: array
          items:
            $ref: '#/components/schemas/ItemStateData'
          description: Optional filter by item states
          uniqueItems: true
          default: []
          example: ["AVAILABLE"]
        created:
          allOf:
            - $ref: '#/components/schemas/RangeQueryDateTime'
          nullable: true
          description: Optional filter by item creation date range
        updated:
          allOf:
            - $ref: '#/components/schemas/RangeQueryDateTime'
          nullable: true
          description: Optional filter by item last updated date range

    SearchFilterDataPatch:
      type: object
      description: |
        Partial search filter update data.
        All fields are optional and only provided fields will be updated.
        Follows the same structure as SearchFilterData but with optional fields.
      properties:
        language:
          allOf:
            - $ref: '#/components/schemas/LanguageData'
          nullable: true
          description: Language for search and localized content
        currency:
          allOf:
            - $ref: '#/components/schemas/CurrencyData'
          nullable: true
          description: Currency for price display
        itemQuery:
          type: string
          description: Text query for searching items (minimum 3 characters when provided)
          minLength: 3
          nullable: true
          example: "laptop bag"
        shopNameQuery:
          type: string
          description: Optional text query for filtering by shop name (minimum 3 characters when provided)
          minLength: 3
          nullable: true
          example: "Electronics Store"
        price:
          allOf:
            - $ref: '#/components/schemas/RangeQueryUInt64'
          nullable: true
          description: Optional price range filter in minor currency units
        state:
          type: array
          items:
            $ref: '#/components/schemas/ItemStateData'
          description: Optional filter by item states
          uniqueItems: true
          nullable: true
          example: ["AVAILABLE", "LISTED"]
        created:
          allOf:
            - $ref: '#/components/schemas/RangeQueryDateTime'
          nullable: true
          description: Optional filter by item creation date range
        updated:
          allOf:
            - $ref: '#/components/schemas/RangeQueryDateTime'
          nullable: true
          description: Optional filter by item last updated date range

    UserSearchFilterData:
      type: object
      description: Complete user search filter with metadata
      required:
        - userId
        - searchFilterId
        - searchFilter
        - created
        - updated
      properties:
        userId:
          type: string
          format: uuid
          description: Unique identifier of the user who owns this search filter
          example: "550e8400-e29b-41d4-a716-446655440000"
        searchFilterId:
          type: string
          format: uuid
          description: Unique identifier for this search filter
          example: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
        searchFilter:
          $ref: '#/components/schemas/SearchFilterData'
        created:
          type: string
          format: date-time
          description: When the search filter was created (RFC3339 format)
          example: "2024-01-01T10:00:00Z"
        updated:
          type: string
          format: date-time
          description: When the search filter was last updated (RFC3339 format)
          example: "2024-01-01T12:00:00Z"

    RangeQueryUInt64:
      type: object
      description: Range query for numeric values (prices in minor currency units)
      properties:
        min:
          type: integer
          minimum: 0
          description: Minimum value (inclusive)
          example: 1000
        max:
          type: integer
          minimum: 0
          description: Maximum value (inclusive)
          example: 5000

    RangeQueryDateTime:
      type: object
      description: Range query for date and time values
      properties:
        min:
          type: string
          format: date-time
          description: Minimum date and time (inclusive, RFC3339 format)
          example: "2024-01-01T00:00:00Z"
        max:
          type: string
          format: date-time
          description: Maximum date and time (inclusive, RFC3339 format)
          example: "2024-12-31T23:59:59Z"

    SortSearchFilterFieldData:
      type: string
      enum: [created]
      description: |
        Fields available for sorting search filters:
        - created: Sort by creation timestamp
      example: created

    SearchFilterCollectionData:
      type: object
      description: Paginated collection of user search filters with flattened pagination
      required:
        - items
        - from
        - size
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserSearchFilterData'
          description: Array of search filters in the current page
        from:
          type: integer
          minimum: 0
          description: Number of items skipped (offset)
          example: 0
        size:
          type: integer
          minimum: 0
          description: Number of items in the current page
          example: 21
        total:
          type: integer
          minimum: 0
          description: Total number of items matching the query
          nullable: true
          example: 127

    PutItemsCollectionData:
      type: object
      description: Collection of items to create or update
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PutItemData'
          description: Array of items to process
          minItems: 1
          maxItems: 1000

    PutItemData:
      type: object
      description: |
        Data required to create or update an item.
        Shop information (shopId and shopName) is automatically enriched based on the item's URL.
      required:
        - shopsItemId
        - title
        - state
        - url
      properties:
        shopsItemId:
          type: string
          description: Shop's unique identifier for the item. Can be any arbitrary string.
          example: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
        title:
          $ref: '#/components/schemas/LocalizedTextData'
        description:
          allOf:
            - $ref: '#/components/schemas/LocalizedTextData'
          nullable: true
          description: Optional item description
        price:
          allOf:
            - $ref: '#/components/schemas/PriceData'
          nullable: true
          description: Optional item price
        state:
          $ref: '#/components/schemas/ItemStateData'
        url:
          type: string
          format: uri
          description: |
            URL to the item on the shop's website.
            The shop will be automatically identified and enriched based on this URL.
          example: "https://tech-store-premium.com/items/smartphone-case"
        images:
          type: array
          items:
            type: string
            format: uri
          description: Array of image URLs for the item
          default: []
          example:
            - "https://tech-store-premium.com/images/case-1.jpg"
            - "https://tech-store-premium.com/images/case-2.jpg"

    PutItemsResponse:
      type: object
      description: Response from bulk item creation/update operation with enrichment
      required:
        - skipped
      properties:
        unprocessed:
          type: array
          items:
            type: string
            format: uri
          description: |
            Item URLs that could not be processed due to temporary issues.
            These items may succeed if retried.
          default: []
          example:
            - "https://tech-store.com/items/temporary-issue"
        failed:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PutItemError'
          description: |
            Map of item URLs to error codes for items that failed processing.
            The key is the item URL, and the value is the error code explaining why it failed.
          default: {}
          example:
            "https://unknown-shop.com/item": "SHOP_NOT_FOUND"
            "https://tech-store.com/expensive-item": "MONETARY_AMOUNT_OVERFLOW"
        skipped:
          type: integer
          minimum: 0
          description: Number of items that were skipped during processing because they had no changes
          example: 2

    GetShopData:
      type: object
      description: Complete shop information including metadata
      required:
        - shopId
        - name
        - urls
        - created
        - updated
      properties:
        shopId:
          type: string
          format: uuid
          description: Unique identifier of the shop
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          description: Display name of the shop
          example: "Tech Store Premium"
        urls:
          type: array
          items:
            type: string
            format: uri
          description: All known URLs to the shop's website
          example: ["https://tech-store-premium.com", "https://tech-store-premium.de", "https://apple.tech-store-premium.com"]

        image:
          type: string
          format: uri
          nullable: true
          description: Optional URL to the shop's logo or image
          example: "https://tech-store-premium.com/logo.svg"
        created:
          type: string
          format: date-time
          description: When the shop was first created (RFC3339 format)
          example: "2024-01-01T10:00:00Z"
        updated:
          type: string
          format: date-time
          description: When the shop was last updated (RFC3339 format)
          example: "2024-01-01T12:00:00Z"

    ShopSearchData:
      type: object
      description: Search filter configuration for shops with query parameters and filtering options
      properties:
        shopNameQuery:
          type: string
          description: Optional text query for searching shops by name (minimum 3 characters)
          minLength: 3
          example: "tech store"
        created:
          allOf:
            - $ref: '#/components/schemas/RangeQueryDateTime'
          nullable: true
          description: Optional filter by shop creation date range
        updated:
          allOf:
            - $ref: '#/components/schemas/RangeQueryDateTime'
          nullable: true
          description: Optional filter by shop last updated date range

    SortShopFieldData:
      type: string
      enum: [score, name, updated, created]
      description: |
        Fields available for sorting shops:
        - score: Sort by relevance score (default, only available when searching with text query)
        - name: Sort by shop name
        - updated: Sort by last updated timestamp
        - created: Sort by creation timestamp
      default: score
      example: name

    ShopSearchResultData:
      type: object
      description: Paginated collection of shops with flattened pagination
      required:
        - items
        - from
        - size
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/GetShopData'
          description: Array of shops in the current page
        from:
          type: integer
          minimum: 0
          description: Number of items skipped (offset)
          example: 0
        size:
          type: integer
          minimum: 0
          description: Number of items in the current page
          example: 21
        total:
          type: integer
          minimum: 0
          description: Total number of items matching the query
          nullable: true
          example: 127

    ItemKeyData:
      type: object
      description: Identifier for an item using shop ID and shop's item ID
      required:
        - shopId
        - shopsItemId
      properties:
        shopId:
          type: string
          format: uuid
          description: Unique identifier of the shop
          example: "550e8400-e29b-41d4-a716-446655440000"
        shopsItemId:
          type: string
          description: Shop's unique identifier for the item. Can be any arbitrary string.
          example: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"

    WatchlistItemData:
      type: object
      description: Watchlist item containing the item data and when it was added to the watchlist
      required:
        - item
        - created
      properties:
        item:
          $ref: '#/components/schemas/GetItemData'
        created:
          type: string
          format: date-time
          description: When the item was added to the watchlist (RFC3339 format)
          example: "2024-01-15T08:00:00Z"

    WatchlistCollectionData:
      type: object
      description: Paginated collection of watchlist items using cursor-based pagination
      required:
        - items
        - size
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WatchlistItemData'
          description: Array of watchlist items in the current page
        size:
          type: integer
          minimum: 0
          description: Number of items in the current page
          example: 21
        searchAfter:
          type: string
          format: date-time
          description: Cursor for the next page (RFC3339 timestamp). Present when there are more results.
          nullable: true
          example: "2024-01-15T08:00:00Z"
        total:
          type: integer
          minimum: 0
          description: Total number of items (optional, may not be available for cursor-based pagination)
          nullable: true
          example: 127

    SortWatchlistItemFieldData:
      type: string
      enum: [created]
      description: |
        Fields available for sorting watchlist items:
        - created: Sort by when item was added to watchlist
      example: created

    PutItemError:
      type: string
      enum: [SHOP_NOT_FOUND, MONETARY_AMOUNT_OVERFLOW, ITEM_ENRICHMENT_FAILED]
      description: |
        Error codes for items that failed during processing:
        - SHOP_NOT_FOUND: The shop associated with the item's URL is not registered in the system
        - MONETARY_AMOUNT_OVERFLOW: The price amount exceeds the maximum supported value during currency conversion
        - ITEM_ENRICHMENT_FAILED: Failed to enrich the item with additional shop and price information
      example: SHOP_NOT_FOUND

tags:
  - name: Items
    description: Operations related to item retrieval and search
  - name: Search Filters
    description: Operations for managing user search filters
  - name: Shops
    description: Operations related to shop retrieval and search
  - name: Watchlist
    description: Operations for managing user's item watchlist